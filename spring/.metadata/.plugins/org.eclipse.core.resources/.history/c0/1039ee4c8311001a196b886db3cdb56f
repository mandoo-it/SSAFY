package com.ssafy.fms.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.simple.JSONObject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.ssafy.fms.service.AddService;
import com.ssafy.fms.service.FoodService;
import com.ssafy.fms.service.IntakeService;
import com.ssafy.fms.service.MemberService;
import com.ssafy.fms.vo.Add;
import com.ssafy.fms.vo.Exercise;
import com.ssafy.fms.vo.Food;
import com.ssafy.fms.vo.Intake;
import com.ssafy.fms.vo.Member;

import net.nurigo.java_sdk.Coolsms;
import net.nurigo.java_sdk.api.Message;
import net.nurigo.java_sdk.exceptions.CoolsmsException;

@Controller
public class IntakeController {

	@Autowired
	IntakeService service;
	@Autowired
	FoodService fservice;
	@Autowired
	AddService aservice;
	@Autowired
	MemberService mservice;
	
	@GetMapping("/intakelist")
	public String intakelist(HttpSession session, Model model) {
		
		//로그인이 안되어있으면
		if(session.getAttribute("login") == null) {
			try {
				return "redirect:/login";
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		String id = (String) session.getAttribute("login");
		List<Intake> list = service.selectAll(id);
		List<Intake> list2 = new ArrayList();
		Food food = new Food(0,0,0,0,0,0,0,0,0,0);
		
		Calendar cal = Calendar.getInstance();
		String today = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH)+1) + "-" + cal.get(Calendar.DATE);

		for (Intake intake : list) {
			if(!intake.getDate().equals(today)) continue;
			list2.add(intake);
			Food tfood = fservice.selectOne(intake.getCode());
			food.setSupportpereat(food.getSupportpereat() + tfood.getSupportpereat()*intake.getCount());
			food.setCalory(food.getCalory() + tfood.getCalory()*intake.getCount());
			food.setCarbo(food.getCarbo() + tfood.getCarbo()*intake.getCount());
			food.setProtein(food.getProtein() + tfood.getProtein()*intake.getCount());
			food.setFat(food.getFat() + tfood.getFat()*intake.getCount());
			food.setSugar(food.getSugar() + tfood.getSugar()*intake.getCount());
			food.setNatrium(food.getNatrium() + tfood.getNatrium()*intake.getCount());
			food.setChole(food.getChole() + tfood.getChole()*intake.getCount());
			food.setFattyacid(food.getFattyacid() + tfood.getFattyacid()*intake.getCount());
			food.setTransfat(food.getTransfat() + tfood.getTransfat()*intake.getCount());
		}
		
		model.addAttribute("list", list2);
		model.addAttribute("f", food);
		return "myintakeinfo";
	}
	
	@GetMapping("/bestlist")
	public String bestlist(HttpSession session, Model model) {
		
		//로그인이 안되어있으면
		if(session.getAttribute("login") == null) {
			try {
				return "redirect:/login";
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		String id = (String) session.getAttribute("login");
		List<Intake> list = service.selectAll(id);
		List<Intake> list2 = new ArrayList();
		
		for (Intake intake : list) {
			
			int index = -1; 
			for(int i=0; i<list2.size(); i++) {
				if(list2.get(i).getName().equals(intake.getName())) {
					index = i;
					list2.get(i).setCount(list2.get(i).getCount() + intake.getCount());
					break;
				}
			}
			if(index == -1) list2.add(intake) ;
			//list2.add(intake);
		}
		
		model.addAttribute("list", list2);
		return "mybestinfo";
	}
	
	@GetMapping("/date")
	public String date(HttpSession session, Model model, String date1, String date2) {
		
		//로그인이 안되어있으면
		if(session.getAttribute("login") == null) {
			try {
				return "redirect:/login";
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		String id = (String) session.getAttribute("login");
		List<Intake> list = service.selectAll(id);
		List<Intake> list2 = new ArrayList();
		Food food = new Food(0,0,0,0,0,0,0,0,0,0);

		for (Intake intake : list) {
			if(intake.getDate().compareTo(date1) < 0 || intake.getDate().compareTo(date2) > 0) continue;
			list2.add(intake) ;
			Food tfood = fservice.selectOne(intake.getCode());
			food.setSupportpereat(food.getSupportpereat() + tfood.getSupportpereat()*intake.getCount());
			food.setCalory(food.getCalory() + tfood.getCalory()*intake.getCount());
			food.setCarbo(food.getCarbo() + tfood.getCarbo()*intake.getCount());
			food.setProtein(food.getProtein() + tfood.getProtein()*intake.getCount());
			food.setFat(food.getFat() + tfood.getFat()*intake.getCount());
			food.setSugar(food.getSugar() + tfood.getSugar()*intake.getCount());
			food.setNatrium(food.getNatrium() + tfood.getNatrium()*intake.getCount());
			food.setChole(food.getChole() + tfood.getChole()*intake.getCount());
			food.setFattyacid(food.getFattyacid() + tfood.getFattyacid()*intake.getCount());
			food.setTransfat(food.getTransfat() + tfood.getTransfat()*intake.getCount());
		}
		
		list2.sort(new Comparator<Intake>() {
			@Override
			public int compare(Intake o1, Intake o2) {
				return o2.getDate().compareTo(o1.getDate());
			}
		});
		
		model.addAttribute("list", list2);
		model.addAttribute("date1", date1);
		model.addAttribute("date2", date2);
		model.addAttribute("f", food);
		return "myintakeinfo";
	}
	
	@GetMapping("/insert/{code}/{name}")
	public String insert(HttpSession session, Model model, @PathVariable int code, @PathVariable String name) {
		
		//로그인이 안되어있으면
		if(session.getAttribute("login") == null) {
			try {
				return "redirect:/login";
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		String id = (String) session.getAttribute("login");
		List<Intake> list = service.selectAll(id);
		Calendar cal = Calendar.getInstance();
		String today = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH)+1) + "-" + cal.get(Calendar.DATE);
		
		boolean check = false;
		for (Intake intake : list) {
			if(intake.getCode() == code && intake.getDate().equals(today)) {
				service.update(new Intake(id, code, name, 1, today));
				check = true;
				break;
			}
		}
		
		if(check == false) {
			service.insert(new Intake(id, code, name, 1, today));
		}
		
		model.addAttribute("list", list);
		//return "redirect:/detailinfo/"+ code;
		return "redirect:/intakelist";
	}
	
	@GetMapping("/insert2/{code}/{count}")
	public String insert2(HttpSession session, Model model, @PathVariable int code, @PathVariable int count) {
		
		//로그인이 안되어있으면
		if(session.getAttribute("login") == null) {
			try {
				return "redirect:/login";
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		String id = (String) session.getAttribute("login");
		List<Intake> list = service.selectAll(id);
		boolean check = false;
		String name = fservice.selectOne(code).getName();
		Calendar cal = Calendar.getInstance();
		String today = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH)+1) + "-" + cal.get(Calendar.DATE);
		
		for (Intake intake : list) {
			if(intake.getCode() == code && intake.getDate().equals(today)) {
				service.update(new Intake(id, code, name, count, today));
				check = true;
				break;
			}
		}
		
		if(check == false) {
			service.insert(new Intake(id, code, name, count, today));
		}
		
		aservice.delete(new Add(id, code, count));
		
		model.addAttribute("list", list);
		//return "redirect:/detailinfo/"+ code;
		return "redirect:/intakelist";
	}
	
	@GetMapping("/today")
	public String today(HttpSession session, Model model) {
		String id = (String)session.getAttribute("login");
		if(id == null) {
			try {
				return "redirect:/login";
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		SimpleDateFormat format1 = new SimpleDateFormat("yyyy년 MM월 dd일");
		Date time = new Date();
		String time1 = format1.format(time);
		List<Intake> list = service.selectToday(id);
		model.addAttribute("today", time1);
		model.addAttribute("list", list);
		int total = 0;
		for(Intake it : list) {
			Food tfood = fservice.selectOne(it.getCode());
			total += tfood.getCalory()*it.getCount();
		}
		Member m = mservice.search(id);
		double proper = m.getWeight() * m.getRank() * 24;
		model.addAttribute("total", total);
		model.addAttribute("proper", proper);
		return "today";
	}
	
	
	static int[][] ex2;
	static int[][] result;
	@GetMapping("/msg/{cal}")
	public String msg(@PathVariable double cal, HttpServletRequest request, Model model) throws CoolsmsException {
		System.out.println("msg" +cal);
		
		List<Exercise> ex = service.exercise(); 
		ex2 = new int[ex.size()][3]; 
		result = new int[ex.size()][2]; 
		getExer(cal, ex, 0, 0);
		for(int i=0;i<result.length;i++) {
			System.out.println(result[i][0] + "hi" + result[i][1]);
		}
//		String api_key = "NCSBZDS4RPRRABL8";
//	    String api_secret = "HXH4UFPE4GBJ0KIMXUXJHUM9NYQSDCL5";
//	    Message coolsms = new Message(api_key, api_secret);
//
//	    HashMap<String, String> set = new HashMap<String, String>();
//	    set.put("to", "01066157538"); // 수신번호
//
//	    set.put("from", "01066157538"); // 발신번호
//	    set.put("text", "ㅇㅇ"); // 문자내용 
//	    set.put("type", "sms"); // 문자 타입
//
//	    System.out.println(set);
//
//	  //  JSONObject result =(JSONObject)coolsms.send(set); // 보내기&전송결과받기
//
//	    try {
//	        JSONObject obj = (JSONObject) coolsms.send(set);
//	        System.out.println(obj.toString());
//	      } catch (CoolsmsException e) {
//	        System.out.println(e.getMessage());
//	        System.out.println(e.getCode());
	      //}

		return "redirect:/today";
	}
	
	static double min = Integer.MAX_VALUE;
	static void getExer(double cal, List<Exercise> ex, double total, int start) {
		if(total >= cal) {
			if(total < min) {
				min = total;
				for(int i=0;i<result.length;i++) {
					result[i][0] = ex2[i][0];
					result[i][1] = ex2[i][1];
				}
			}
			total = 0;
			return;
		}
		
		for(int i=start;i<ex.size();i++) {
			int rand = (int)(Math.random()*6+1);
			ex2[i][0] = ex.get(i).getCode();
			ex2[i][1] = rand * 10;
			ex2[i][2] = ex.get(i).getCal() * rand;
			total += ex.get(i).getCal();
			//List<String> indexes = new ArrayList<String>(ex2.keySet()); 
//			if(!ex2.containsKey(ex.get(i).getName())) {
//				ex2.put(ex.get(i).getName(), rand * ex.get(i).getCal());
//			} else {
//				ex2.remove(ex.get(i).getName());
//				ex2.a
//				
//			}
			//total += ex.get(i).getCal();
			getExer(cal, ex, total, i+1);
		}
		
	}

}
