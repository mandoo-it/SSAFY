package com.ssafy.fms.controller;

import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import com.ssafy.fms.service.FoodService;
import com.ssafy.fms.service.MemberService;
import com.ssafy.fms.vo.Food;
import com.ssafy.fms.vo.Member;

@Controller
public class FoodController {

	@Autowired
	FoodService service;
	@Autowired
	MemberService mservice;
	
	@GetMapping("/home")
	public String home(Model model) {
		model.addAttribute("list", service.selectAll());
		return "index";
	}
	
	@GetMapping("/detailinfo/{code}")
	public String detailinfo(Model model, @PathVariable int code, HttpSession session) {
		Food food = service.selectOne(code);
		model.addAttribute("f", food);
		service.Countup(code);
		System.out.println(food.getAllergy());
		String allergy = "";
		if(session.getAttribute("login") != null) {
			
			String id = (String) session.getAttribute("login");
			Member m = mservice.search(id);
			
			String m_allergy[] = m.getAllergy().split(",");
			String f_allergy[] = food.getAllergy().split(",");
			
			//이분탐색으로 로그인 되어 있는 멤버의 알레르기 정보가 포함되는 푸드의 알레르기 정보 탐색
			Arrays.sort(f_allergy);
			Arrays.sort(m_allergy);
			
			for(int i=0; i<m_allergy.length; i++) {
				
				int mid;
		        int left = 0;
		        int right = f_allergy.length - 1;
		 
		        while (right >= left) {
		            mid = (right + left)/2;
		 
		            if (m_allergy[i].contains(f_allergy[mid])) {
		            	allergy += m_allergy[i] + " ";
		                break;
		            }
		 
		            if (m_allergy[i].compareTo(f_allergy[mid])<0) {
		                right = mid - 1;
		            } else {
		                left = mid + 1;
		            }
		        }
			}
		}
		else {
			allergy = food.getAllergy();
		}
		model.addAttribute("allergy", allergy);
		
		return "detailinfo";
	}
	
	@GetMapping("/searchFood")
	public String searchFood(Model model, String condition, String word) {
		List<Food> list = null;
		if(condition != null) list = service.search(condition, "%"+word+"%");
		else list = service.selectAll();
		model.addAttribute("list", list);
		return "searchour";
	}
	
	@GetMapping("/today")
	public String today(HttpSession session, Model model) {
		if(session.getAttribute("login") == null) {
			try {
				return "redirect:/login";
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return "today";
	}

}
